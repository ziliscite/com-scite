services:
  user_db:
    image: postgres
    ports:
      - "5433:5432"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_USER_DB}
    volumes:
      - ./.volume/db-data/user_db/:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ${POSTGRES_USER_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - micro-network

  token_db:
    image: postgres
    ports:
      - "5434:5432"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_TOKEN_DB}
    volumes:
      - ./.volume/db-data/token_db/:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ${POSTGRES_TOKEN_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - micro-network

  comic_db:
    image: postgres
    ports:
      - "5435:5432"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_COMIC_DB}
    volumes:
      - ./.volume/db-data/comic_db/:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ${POSTGRES_COMIC_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - micro-network

  chapter_db:
    image: postgres
    ports:
      - "5436:5432"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_CHAPTER_DB}
    volumes:
      - ./.volume/db-data/chapter_db/:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ${POSTGRES_CHAPTER_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - micro-network

  mailhog:
    image: "mailhog/mailhog:latest"
    ports:
      - "1025:1025"
      - "8025:8025"
    volumes:
      - ./.volume/db-data/mailhog/:/home/mailhog/maildir
    environment:
      - MH_STORAGE=maildir
      - MH_MAILDIR_PATH=maildir
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8025"]
      interval: 30s
      retries: 3
      timeout: 10s
      start_period: 10s
    networks:
      - micro-network

  rabbitmq:
    image: "rabbitmq:4.0.5-alpine"
    ports:
      - "5672:5672"
    deploy:
      mode: replicated
      replicas: 1
    volumes:
      - ./.volume/db-data/rabbitmq/:/var/lib/rabbitmq/
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - micro-network

  auth:
    build:
      context: ./auth
      dockerfile: ./auth.dockerfile
    restart: always
    ports:
      - "50051:50051"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DB_DSN: ${DB_DSN}
      JWT_SECRETS: ${JWT_SECRETS}
    depends_on:
      user_db:
        condition: service_healthy
    networks:
      - micro-network

  activation:
    build:
      context: ./activation
      dockerfile: ./activation.dockerfile
    restart: always
    ports:
      - "50052:50051"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      TOKEN_DSN: ${TOKEN_DSN}
    depends_on:
      token_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - micro-network

  mailer:
    build:
      context: ./mailer
      dockerfile: ./mailer.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_SENDER: ${SMTP_SENDER}
    depends_on:
      mailhog:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - micro-network

  gateway:
    build:
      context: ./gateway
      dockerfile: ./gateway.dockerfile
    restart: always
    ports:
      - "8001:80"
    deploy:
      mode: replicated
      replicas: 1
    networks:
      - micro-network

  comic:
    build:
      context: ./comic
      dockerfile: ./comic.dockerfile
    restart: always
    ports:
      - "50053:50051"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DB_DSN: ${COMIC_DSN}
    depends_on:
      comic_db:
        condition: service_healthy
    networks:
      - micro-network

  object_storage:
    build:
      context: ./object_storage
      dockerfile: ./object_storage.dockerfile
    restart: always
    ports:
      - "50054:50051"
      - "8002:80"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      KEY: ${ENCRYPT_KEY}
    networks:
      - micro-network

networks:
  micro-network:
    driver: bridge