// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: comic.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ComicService_InsertComic_FullMethodName    = "/comic.ComicService/InsertComic"
	ComicService_GetComicBySlug_FullMethodName = "/comic.ComicService/GetComicBySlug"
)

// ComicServiceClient is the client API for ComicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComicServiceClient interface {
	InsertComic(ctx context.Context, in *InsertComicRequest, opts ...grpc.CallOption) (*InsertComicResponse, error)
	GetComicBySlug(ctx context.Context, in *GetComicBySlugRequest, opts ...grpc.CallOption) (*GetComicBySlugResponse, error)
}

type comicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComicServiceClient(cc grpc.ClientConnInterface) ComicServiceClient {
	return &comicServiceClient{cc}
}

func (c *comicServiceClient) InsertComic(ctx context.Context, in *InsertComicRequest, opts ...grpc.CallOption) (*InsertComicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertComicResponse)
	err := c.cc.Invoke(ctx, ComicService_InsertComic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comicServiceClient) GetComicBySlug(ctx context.Context, in *GetComicBySlugRequest, opts ...grpc.CallOption) (*GetComicBySlugResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetComicBySlugResponse)
	err := c.cc.Invoke(ctx, ComicService_GetComicBySlug_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComicServiceServer is the server API for ComicService service.
// All implementations must embed UnimplementedComicServiceServer
// for forward compatibility.
type ComicServiceServer interface {
	InsertComic(context.Context, *InsertComicRequest) (*InsertComicResponse, error)
	GetComicBySlug(context.Context, *GetComicBySlugRequest) (*GetComicBySlugResponse, error)
	mustEmbedUnimplementedComicServiceServer()
}

// UnimplementedComicServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedComicServiceServer struct{}

func (UnimplementedComicServiceServer) InsertComic(context.Context, *InsertComicRequest) (*InsertComicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertComic not implemented")
}
func (UnimplementedComicServiceServer) GetComicBySlug(context.Context, *GetComicBySlugRequest) (*GetComicBySlugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComicBySlug not implemented")
}
func (UnimplementedComicServiceServer) mustEmbedUnimplementedComicServiceServer() {}
func (UnimplementedComicServiceServer) testEmbeddedByValue()                      {}

// UnsafeComicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComicServiceServer will
// result in compilation errors.
type UnsafeComicServiceServer interface {
	mustEmbedUnimplementedComicServiceServer()
}

func RegisterComicServiceServer(s grpc.ServiceRegistrar, srv ComicServiceServer) {
	// If the following call pancis, it indicates UnimplementedComicServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ComicService_ServiceDesc, srv)
}

func _ComicService_InsertComic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertComicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComicServiceServer).InsertComic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComicService_InsertComic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComicServiceServer).InsertComic(ctx, req.(*InsertComicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComicService_GetComicBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComicBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComicServiceServer).GetComicBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComicService_GetComicBySlug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComicServiceServer).GetComicBySlug(ctx, req.(*GetComicBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComicService_ServiceDesc is the grpc.ServiceDesc for ComicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comic.ComicService",
	HandlerType: (*ComicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertComic",
			Handler:    _ComicService_InsertComic_Handler,
		},
		{
			MethodName: "GetComicBySlug",
			Handler:    _ComicService_GetComicBySlug_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comic.proto",
}
